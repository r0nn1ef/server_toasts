<?php

/**
 * @file
 * Primary module hooks for Server Toasts module.
 */

use Drupal\Core\Render\Element;
use Drupal\user\UserInterface;

/**
 * Implements hook_theme().
 */
function server_toasts_theme(): array {
  return [
    'server_toast' => ['render element' => 'elements'],
  ];
}

/**
 * Prepares variables for toast templates.
 *
 * Default template: server-toast.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the toast information and any
 *     fields attached to the entity.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_server_toast(array &$variables): void {
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  $variables['attributes']['id'] = 'server-toast-' . $variables['elements']['#server_toast']->id();
  if ( is_null( $variables['attributes']['class'] ) ) {
    $variables['attributes']['class'] = [];
  }
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

/**
 * Implements hook_user_cancel().
 */
function server_toasts_user_cancel($edit, UserInterface $account, $method): void {
  switch ($method) {
    case 'user_cancel_block_unpublish':
      // Unpublish toasts.
      $storage = \Drupal::entityTypeManager()->getStorage('server_toast');
      $server_toast_ids = $storage->getQuery()
        ->condition('uid', $account->id())
        ->condition('status', 1)
        ->accessCheck(FALSE)
        ->execute();
      foreach ($storage->loadMultiple($server_toast_ids) as $server_toast) {
        $server_toast->set('status', FALSE)->save();
      }
      break;

    case 'user_cancel_reassign':
      // Anonymize toasts.
      $storage = \Drupal::entityTypeManager()->getStorage('server_toast');
      $server_toast_ids = $storage->getQuery()
        ->condition('uid', $account->id())
        ->accessCheck(FALSE)
        ->execute();
      foreach ($storage->loadMultiple($server_toast_ids) as $server_toast) {
        $server_toast->setOwnerId(0)->save();
      }
      break;
  }
}

/**
 * Implements hook_ENTITY_TYPE_predelete() for user entities.
 */
function server_toasts_user_predelete(UserInterface $account): void {
  // Delete toasts that belong to this account.
  $storage = \Drupal::entityTypeManager()->getStorage('server_toast');
  $server_toast_ids = $storage->getQuery()
    ->condition('uid', $account->id())
    ->accessCheck(FALSE)
    ->execute();
  $storage->delete(
    $storage->loadMultiple($server_toast_ids)
  );
}

/**
 * Implements hook_theme_suggestions_alter().
 *
 * Add several template suggestions for the Toast entity.
 *
 * @return void
 */
function server_toasts_theme_suggestions_alter(array &$suggestions, array &$variables, $hook): void {
  if ( $hook == 'server_toast' ) {
    /**
     * @var \Drupal\server_toasts\Entity\Toast $toast
     */
    $toast = $variables['elements']['#server_toast'];
    $prefix = 'server_toast';
    $suggestions[] = $prefix . '__' . $toast->id();
    $suggestions[] = $prefix . '__' . $variables['elements']['#view_mode'];
    $suggestions[] = $prefix . '__' . $variables['elements']['#view_mode'] . '__' . $toast->id();
    $suggestions[] = $prefix . '__type__' . $toast->bundle();
    $suggestions[] = $prefix . '__type__' . $toast->bundle() . '__' . $toast->id();
    $suggestions[] = $prefix . '__type__' . $toast->bundle() . '__' . $variables['elements']['#view_mode'];
    $suggestions[] = $prefix . '__type__' . $toast->bundle() . '__' . $variables['elements']['#view_mode'] . '__' . $toast->id();
  }
}
